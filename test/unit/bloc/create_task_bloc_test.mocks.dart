// Mocks generated by Mockito 5.1.0 from annotations
// in todoooze/test/unit/bloc/create_task_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:todoooze/domain/api/api.dart' as _i2;
import 'package:todoooze/domain/model/task.dart' as _i5;
import 'package:todoooze/domain/repository/task_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeTaskApi_0 extends _i1.Fake implements _i2.TaskApi {}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i3.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TaskApi get api => (super.noSuchMethod(Invocation.getter(#api),
      returnValue: _FakeTaskApi_0()) as _i2.TaskApi);
  @override
  _i4.Future<List<_i5.Task>> getTasks() =>
      (super.noSuchMethod(Invocation.method(#getTasks, []),
              returnValue: Future<List<_i5.Task>>.value(<_i5.Task>[]))
          as _i4.Future<List<_i5.Task>>);
  @override
  _i4.Stream<List<_i5.Task>> subscribeToTasks() =>
      (super.noSuchMethod(Invocation.method(#subscribeToTasks, []),
              returnValue: Stream<List<_i5.Task>>.empty())
          as _i4.Stream<List<_i5.Task>>);
  @override
  _i4.Future<dynamic> addNewTask(_i5.Task? task) =>
      (super.noSuchMethod(Invocation.method(#addNewTask, [task]),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> updateTask(_i5.Task? task) =>
      (super.noSuchMethod(Invocation.method(#updateTask, [task]),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> deleteTask(_i5.Task? task) =>
      (super.noSuchMethod(Invocation.method(#deleteTask, [task]),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
}
